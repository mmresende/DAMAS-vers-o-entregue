/***************************************************************************
*
*  $MCD M√≥dulo de defini√ß√£o: LIS  Lista duplamente encadeada
*
*  Arquivo gerado:              LISTA.h
*  Letras identificadoras:      LIS
*
*  Projeto: damas
*  Arquivo: damas\fontes\lista.h  
*
*  $HA Hist√≥rico de evolu√ß√£o: 
*     Vers√£o  Autor    Data     Observa√ß√µes
*     2       hs/mr/rh   17/junho/2014    implementaÁ„o completa do jogo
*    
*  
*  $ED Descri√ß√£o do m√≥dulo
*     Implementa listas gen√©ricas duplamente encadeadas.
*     Podem existir n listas em opera√ß√£o simultaneamente.
*     As listas possuem uma cabe√ßa encapsulando o seu estado.
*
*     Cada lista √© homog√™nea quanto ao tipo dos dados que armazena.
*     Cada elemento da lista referencia o valor que cont√©m.
*
*     Os ponteiros para os dados s√£o copiados para elementos da lista.
*        N√£o √© copiado o valor apontado por estes ponteiros.
*
*     O controle da destrui√ß√£o do valor de um elemento a ser exclu√≠do
*        √© realizado por uma fun√ß√£o fornecida pelo usu√°rio.
*
*     Cada lista referencia uma fun√ß√£o que determina como devem ser
*        desalocados os dados nela contidos.
*
*     A fun√ß√£o de libera√ß√£o dos valores contidos nos elementos deve
*        assegurar a libera√ß√£o de todos os espa√ßos refer√™nciados pelo
*        valor contido em um elemento.
*        Esta fun√ß√£o √© chamada antes de se desalocar um elemento
*        de uma lista.
*        Caso n√£o seja necess√°rio desalocar o valor referenciado pelo
*        elemento, o ponteiro para a fun√ß√£o de libera√ß√£o poder√° ser NULL .
*        Caso o elemento da lista seja a √∫nica √¢ncora do valor referenciado,
*        esta fun√ß√£o deve promover a destrui√ß√£o (free) desse valor e
*        de todos os dados nele ancorados.
*
*  $CRE Cr√©ditos
*    Arndt von Staa. Programa AutoTest - Arcabou√ßo para a automa√ß√£o de testes de 
         programas redigidos em C; m√≥dulo Lista Duplamente Encadeada
***************************************************************************/
#ifndef LISTA_
#define LISTA_

#ifdef LISTA_OWN
#define LISTA_EXT
#else
#define LISTA_EXT extern
#endif

/***** Declara√ß√µes exportadas pelo m√≥dulo *****/

/* Tipo refer√™ncia para uma lista */

typedef struct LIS_tagLista *LIS_tppLista;

/***********************************************************************
*
*  $TC Tipo de dados: LIS Condi√ß√µes de retorno
*
*
*  $ED Descri√ß√£o do tipo
*     Condi√ß√µes de retorno das fun√ß√µes da lista
*
***********************************************************************/

typedef enum {
    LIS_CondRetOK, /* Concluiu corretamente */
    LIS_CondRetListaVazia, /* A lista n„o contÈm elementos */
    LIS_CondRetFimLista, /* Foi atingido o fim de lista */
    LIS_CondRetNaoAchou, /* N„o encontrou o valor procurado */
    LIS_CondRetFaltouMemoria, /* Faltou memÛria ao tentar criar um elemento de lista */
    LIS_CondRetErroEstrutura /* Estrutura da lista est· errada */
} LIS_tpCondRet;

/***********************************************************************
*
*  $TC Tipo de dados: LIS Modos de deturpar
*
*
***********************************************************************/

#ifdef _DEBUG

typedef enum {
    LIS_EliminarElemento,
    /* elimina o elemento corrente da lista */
    LIS_DeturpaProximoNulo,
    /* atribui NULL ao ponteiro para o prÛximo nÛ*/
    LIS_DeturpaAnteriorNulo,
    /* atribui NULL ao ponteiro para o nÛ anterior */
    LIS_DeturpaProximoLixo,
    /* atribui lixo ao ponteiro para o prÛximo nÛ */
    LIS_DeturpaAnteriorLixo,
    /* atribui lixo ao ponteiro o nÛ anterior */
    LIS_DeturpaConteudoNulo,
    /* atribui NULL ao ponteiro para o conte˙do do nÛ */
    LIS_DeturpaTipoNo,
    /* altera o tipo de estrutura apontado no nÛ */
    LIS_LiberaSemFree,
    /* desencadeia nÛ sem liber·-lo com free */
    LIS_PonteiroCorrenteNulo,
    /* atribui NULL ao ponteiro corrente */
    LIS_PonteiroOrigemNulo,
    /* atribui NULL ao ponteiro de origem. */
    LIS_PonteiroFimNulo,
    /* atribui NULL ao ponteiro de fim de lista */
	LIS_NumeroElementosNegativo,
	/* Faz o n˙mero de elementos indicado na cabeÁa ficar negativo */
	LIS_NumeroElementosNulo,
	/* Faz o n˙mero de elementos indicado na cabeÁa ser zero */
	LIS_DeturpaNumeroElementos
	/* Faz o n˙mero de elementos indicado na cabeÁa n„o corresponder ao n˙mero correto */
} LIS_tpModosDeturpacao;

#endif

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Criar lista
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Cria uma lista gen√©rica duplamente encadeada.
*     Os poss√≠veis tipos s√£o desconhecidos a priori.
*     A tipagem √© implicita.
*     N√£o existe identificador de tipo associado √  lista.
*
*  $EP Par√¢metros
*      $P ExcluirValor  - ponteiro para a fun√ß√£o que processa a
*                     exclus√£o do valor referenciado pelo elemento
*                     a ser exclu√≠do.
*                     Ver descri√ß√£o do m√≥dulo.
*
*  $FV Valor retornado
*     Se executou corretamente retorna o ponteiro para a lista.
*     Este ponteiro ser√° utilizado pelas fun√ß√µes que manipulem esta lista.
*
*     Se ocorreu algum erro, por exemplo falta de mem√≥ria ou dados errados,
*     a fun√ß√£o retornar√° NULL.
*     N√£o ser√° dada mais informa√ß√£o quanto ao problema ocorrido.
*
***********************************************************************/

LIS_tppLista LIS_CriarLista(void(*ExcluirValor)(void *pDado));

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Destruir lista
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Destr√≥i a lista fornecida.
*     O par√¢metro ponteiro para a lista n√£o √© modificado.
*     Se ocorrer algum erro durante a destrui√ß√£o, a lista resultar√°
*     estruturalmente incorreta.
*     OBS. n√£o existe previs√£o para poss√≠veis falhas de execu√ß√£o.
*
*  $FV Valor retornado
*     LIS_CondRetOK    - destruiu sem problemas
*
***********************************************************************/

void LIS_DestruirLista(LIS_tppLista pLista);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Esvaziar lista
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Elimina todos os elementos, sem contudo eliminar a lista
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista a ser esvaziada
*
***********************************************************************/

void LIS_EsvaziarLista(LIS_tppLista pLista);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Inserir elemento antes
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Insere novo elemento antes do elemento corrente.
*     Caso a lista esteja vazia, insere o primeiro elemento da lista.
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista onde deve ser inserido o elemento
*     $P pValor - ponteiro para o valor do novo elemento
*              Pode ser NULL
*
*  $FV Valor retornado
*     LIS_CondRetOK
*     LIS_CondRetFaltouMemoria
*
***********************************************************************/

LIS_tpCondRet LIS_InserirElementoAntes(LIS_tppLista pLista, void *pValor);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Inserir elemento ap√≥s
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Insere novo elemento ap√°s o elemento corrente.
*     Caso a lista esteja vazia, insere o primeiro elemento da lista.
*
*  $EP Par√¢metros
*     
*        $P pLista - ponteiro para a lista onde deve ser inserido o elemento
*        $P pValor - ponteiro para o valor do novo elemento
*                 Pode ser NULL
*
*
*  $FV Valor retornado
*     
*        LIS_CondRetOK 
*        LIS_CondRetFaltouMemoria 
*
***********************************************************************/

LIS_tpCondRet LIS_InserirElementoApos(LIS_tppLista pLista, void *pValor);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Excluir elemento
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Exclui o elemento corrente da lista dada.
*     Se existir o elemento aa esquerda do corrente ser√° o novo corrente.
*     Se n√£o existir e existir o elemento √  direita, este se tornar√° corrente.
*     Se este tamb√©m n√£o existir a lista tornou-se vazia.
*
*  $EP Par√¢metros
*     $P pLista    - ponteiro para a lista na qual deve excluir.
*
*  $FV Valor retornado
*     LIS_CondRetOK
*     LIS_CondRetListaVazia
*
***********************************************************************/

LIS_tpCondRet LIS_ExcluirElemento(LIS_tppLista pLista);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Obter refer√™ncia para o valor contido no elemento
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Obtem a refer√™ncia para o valor contido no elemento corrente da lista
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista de onde se quer o valor
*
*  $FV Valor retornado
*     n√£o NULL - se o elemento corrente existe
*     NULL     - se a lista estiver vazia
*                Pode retornar NULL se o valor inserido no elemento for NULL.
*
***********************************************************************/

void *LIS_ObterValor(LIS_tppLista pLista);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Setar valor do elemento corrente
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Estabelece o valor armazenado no elemento corrente
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista que possui o elemento a ser alterado
*	  $P pValor - ponteiro para o novo valor do elemento corrente
*              Pode ser NUL
*
*  $FV Valor retornado
*     LIS_CondRetOK          - se concluiu corretamente
*	  LIS_CondRetListaVazia  - se a lista estiver vazia		
*
***********************************************************************/

LIS_tpCondRet LIS_SetarValor(LIS_tppLista pLista, void *pValor);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Ir para o elemento inicial
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Torna corrente o primeiro elemento da lista.
*     Faz nada se a lista est√° vazia.
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista a manipular
*
***********************************************************************/

void LIS_IrInicioLista(LIS_tppLista pLista);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Ir para o elemento final
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Torna corrente o elemento final da lista.
*     Faz nada se a lista est√° vazia.
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista a manipular
*
***********************************************************************/

void LIS_IrFinalLista(LIS_tppLista pLista);

/***********************************************************************
*  $FC Fun√ß√£o: LIS  &Ir para o elemento de ind√≠ce i
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Torna corrente o elemento de ind√≠ce i da lista.
*	  Se o par√¢metro i for maior que o n√∫mero de elementos da lista,
*				torna corrente o elemento final da lista
*	  Se o par√¢metro i for zero ou negativo, torna corrente o primeiro
*				elemento da lista
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista a manipular
*	  $P  i   - √≠ndice do elemento da lista a ser tornado elemento corrente
*
*  $FV Valor retornado
*     CondRetOK         - se o elemento de √≠ndice i existir e for o novo
*						  elemento corrente
*     CondRetFimLista   - se o par√£metro i for maior que o tamanho da lista
*						  ou negativo
*     CondRetListaVazia - se a lista est√° vazia
*
***********************************************************************/

LIS_tpCondRet LIS_IrIndice(LIS_tppLista pLista, int i);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Avan√ßar elemento
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Avan√ßa o elemento corrente numElem elementos na lista
*     Se numElem for positivo avan√ßa em dire√ß√£o ao final
*     Se numElem for negativo avan√ßa em dire√ß√£o ao in√≠cio
*     numElem pode ser maior do que o n√∫mro de elementos existentes na
*               dire√ß√£o desejada
*     Se numElem for zero somente verifica se a lista est√° vazia
*
*  $EP Par√¢metros
*     $P pLista  - ponteiro para a lista a ser manipulada
*     $P numElem - o n√∫mero de elementos a andar
*
*  $FV Valor retornado
*     CondRetOK         - se numElem elementos tiverem sido andados
*     CondRetFimLista   - se encontrou o fim da lista antes de andar numElem
*                         elementos
*     CondRetListaVazia - se a lista est√° vazia
*
***********************************************************************/

LIS_tpCondRet LIS_AvancarElementoCorrente(LIS_tppLista pLista, int numElem);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Procurar elemento contendo valor
*
*  $ED Descri√ß√£o da fun√ß√£o
*     Procura o elemento que referencia o valor dado.
*     A fun√ß√£o compara ponteiro e n√£o conte√∫do apontado.
*
*  $EP Par√¢metros
*      $P pLista  - ponteiro para a lista onde procura
*      $P pValor  - ponteiro para o valor procurado
*               Pode ser NULL
*
*  $FV Valor retornado
*     LIS_CondRetOK  - se encontrou.
*                      O elemento corrente √© o primeiro elemento do
*                      elemento corrente inclusive para o fim da lista
*                      e que cont√©m o ponteiro procurado
*
*     LIS_CondRetNaoEncontrou - se o ponteiro n√£o foi encontrado
*                      O elemento corrente continua o mesmo
*     LIS_CondRetListaVazia   - se a lista estiver vazia
*
***********************************************************************/

LIS_tpCondRet LIS_ProcurarValor(LIS_tppLista pLista, void *pValor);

#ifdef _DEBUG
/***********************************************************************
*
*  $FC FunÁ„o: LIS  &Verificar uma lista
*
*  $ED DescriÁ„o da funÁ„o
*     FunÁ„o da interface de teste.
*     Verifica completamente uma determinada lista.
*  $FV Valor retornado
*	  Retorna LIS_CondRetOK, caso n„o encontre falhas na estrutura, ou
*     LIS_CondRetErroEstrutura, caso contr·rio
***********************************************************************/

LIS_tpCondRet LIS_VerificarLista(LIS_tppLista pCabeca);

/***********************************************************************
*
*  $FC Fun√ß√£o: LIS  &Deturpar lista
*
*  $ED Descri√ß√£o da fun√ß√£o
*	  Fun√ß√£o da interface de teste.
*     Corrompe elementos espec√≠ficos da estrutura da lista.
*     Essa fun√ß√£o destina-se a preparar os cen√°rios de teste dos
*     casos de teste utilizados ao testar os verificadores estruturais
*     da lista.
*     Esta fun√ß√£o n√£o tem prote√ß√£o contra erros de uso, consequentemente
*     poder√° levar o programa a ser cancelado pelo sistema operacional.
*
*  $EP Par√¢metros
*     $P pLista       - lista a ser deturpada
*     $P ModoDeturpar - identifica como deve ser feita a deturpa√ß√£o
*                       LIS_tpModosDeturpacao identifica os modos de
*                       deturpa√ß√£o conhecidos
*
***********************************************************************/
void LIS_Deturpar(LIS_tppLista pLista, LIS_tpModosDeturpacao ModoDeturpar);

#endif

#undef LISTA_EXT

/********** Fim do m√≥dulo de defini√ß√£o: LIS  Lista duplamente encadeada **********/

#endif
